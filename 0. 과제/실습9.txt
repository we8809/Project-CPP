

C++ 언매니지드 프로그래밍
진행상황
69% (11주 차 / 총 15 주)
 시간대
한국 표준시, UTC+9

 다가오는 주요 일정
이번 주	11월 18일 07:00	실습 9 제출 마감
다음 주	11월 25일 07:00	실습 10 제출 마감
코스 시작 날짜 : 9월 2일 09:00
새로 추가된 STL 컨테이너
정렬안된 맵(unordered_map)
정렬안된 셋(unordered_set)
어레이(array)
범위 기반 for(range-based for)
스마트 포인터(smart pointer) 1
유니크 포인터(unique_ptr)
실습 9
과제 4  제출 마감: 12월 2일 07:00
제목  	공지일  	제출 마감일  
실습 1 	9월 2일 09:00
(1주 차)
9월 9일 07:00
실습 2 	9월 9일 09:00
(2주 차)
9월 16일 07:00
실습 3 	9월 16일 09:00
(3주 차)
9월 23일 07:00
실습 4 	9월 23일 09:00
(4주 차)
9월 30일 07:00
실습 5 	9월 30일 09:00
(5주 차)
10월 7일 07:00
실습 6 	10월 7일 09:00
(6주 차)
10월 14일 07:00
실습 7 	10월 28일 09:00
(9주 차)
11월 4일 07:00
실습 8 	11월 4일 09:00
(10주 차)
11월 11일 07:00
실습 9 	11월 11일 09:00
(11주 차)
11월 18일 07:00
실습 10	11월 18일 09:00
(12주 차)
11월 25일 07:00
실습 11	11월 25일 09:00
(13주 차)
12월 2일 07:00
과제 1 	9월 2일 09:00
(1주 차)
9월 23일 07:00
과제 2 	9월 23일 09:00
(4주 차)
10월 14일 07:00
과제 3 	10월 14일 09:00
(7주 차)
11월 11일 07:00
과제 4 	11월 11일 09:00
(11주 차)
12월 2일 07:00
실습 9
×
COMP3200 - 실습 9
본 실습은 컴퓨터에서 해야 하는 실습입니다. 코드 작성이 끝났다면 깃 저장소에 커밋 및 푸쉬를 하고 슬랙을 통해 자동으로 채점을 받으세요.

게임 프로그래밍을 하다 보면 종종 같은 형의 개체들을 많이 생성하거나 지워야 할 때가 있습니다. 예를 들어 FPS 게임을 만드는 경우를 생각해 보죠. 게임에서 플레이어가 총을 쏘면 총알이 발사되어 표적까지 날아가야 합니다. 이걸 구현하려면 플레이어가 방아쇠를 당겼을 때 총알 개체의 인스턴스를 만들고, 총알이 표적에 맞았을 때 개체를 지워야 하겠죠. 그리고 유저가 격발할 때마다(FPS 게임에서 늘상 일어나는 일이죠) 매번 이 과정을 반복해야 할 겁니다. 이렇게 구현하면 작동은 합니다만 심각한 문제를 동반하죠. 왜냐하면 개체를 생성하고 지우는 데 드는 비용이 만만치 않을 뿐더러 이걸 자주 하면 메모리 단편화까지 발생할 수 있기 때문입니다.

이러한 문제를 해결하는 방법 중 하나가 개체 풀 패턴(Object Pool Pattern)입니다. 개체 풀 패턴이란 개체가 필요할 때마다 직접 인스턴스를 만드는 대신 개체 풀에 보관되어 있는 사용 가능한 개체를 그냥 가져다 쓰는 방법입니다. 또한, 개체가 필요 없어졌을 때에도 개체를 바로 지우지 않고 풀에 반납합니다. 이러면 개체를 생성하고 지우는 일은 개체 풀이 도맡아 처리하는 꼴이 되죠.

자, 여러분은 POCU 게임 스튜디오에 쥬니어 프로그래머로 채용되어, 회사의 차기작을 개발 중인 팀에 배치되었습니다. 그런데 지지리 복도 없지... 얼마 되지도 않았는데 시니어 엔지니어가 퇴사해 버렸습니다. IceCube와 Game 클래스만 구현해 놓고 말이지요. 이제 개체 풀을 구현하고 Game 개체가 이 풀을 사용할 수 있도록 수정하는 업무가 여러분의 일이 되고 말았네요. 행운을 빕니다!

1. 프로젝트 준비하기
비주얼 스튜디오에서 Lab9.sln을 엽니다.
프로젝트에 IceCube.h 파일을 추가한 뒤, 아래 내용을 추가합니다.
#pragma once

namespace lab9
{
	class IceCube final
	{
	public:
		IceCube();
		~IceCube();

		void Initialize(unsigned int frameCountToLive);
		void Reset();
		void Animate();
		bool IsActive() const;

	private:
		unsigned int mFrameCountToLive;
	};
}
프로젝트에 IceCube.cpp 파일을 추가한 뒤, 아래 내용을 추가합니다.
#include "IceCube.h"

namespace lab9
{
	IceCube::IceCube()
		: mFrameCountToLive(0)
	{
	}

	IceCube::~IceCube()
	{
	}

	void IceCube::Initialize(unsigned int frameCountToLive)
	{
		mFrameCountToLive = frameCountToLive;
	}

	void IceCube::Reset()
	{
		mFrameCountToLive = 0;
	}

	void IceCube::Animate()
	{
		if (mFrameCountToLive == 0)
		{
			return;
		}

		mFrameCountToLive--;
	}

	bool IceCube::IsActive() const
	{
		return mFrameCountToLive > 0;
	}
}
프로젝트에 Game.h 파일을 추가한 뒤, 아래 내용을 추가합니다.
#pragma once

#include <vector>
#include "IceCube.h"

namespace lab9
{
	class Game final
	{
	public:
		Game(unsigned int seed);
		Game(const Game& other) = delete;
		~Game();

		Game& operator=(const Game&) = delete;
		void Spawn();
		void Update();
		const std::vector<IceCube*>& GetActiveGameObjects() const;

	private:
		enum { MAX_FRAME_COUNT_TO_LIVE = 100 };
		std::vector<IceCube*> mActiveGameObjects;
	};
}
프로젝트에 Game.cpp 파일을 추가한 뒤, 아래 내용을 추가합니다.
#include "Game.h"

namespace lab9
{
	Game::Game(unsigned int seed)
	{
		srand(seed);
	}

	Game::~Game()
	{
		for (auto it = mActiveGameObjects.begin(); it != mActiveGameObjects.end(); ++it)
		{
			delete (*it);
		}

		mActiveGameObjects.clear();
	}

	void Game::Spawn()
	{
		IceCube* iceCube = new IceCube();
		iceCube->Initialize(rand() % MAX_FRAME_COUNT_TO_LIVE + 1);
		mActiveGameObjects.push_back(iceCube);
	}

	void Game::Update()
	{
		for (auto it = mActiveGameObjects.begin(); it != mActiveGameObjects.end();)
		{
			IceCube* iceCube = *it;
			iceCube->Animate();

			if (!iceCube->IsActive())
			{
				it = mActiveGameObjects.erase(it);
				delete iceCube;
				continue;
			}

			++it;
		}
	}

	const std::vector<IceCube*>& Game::GetActiveGameObjects() const
	{
		return mActiveGameObjects;
	}
}
2. ObjectPool<T> 클래스 구현하기
보편적 규칙
T는 클래스라고 가정합니다.
이번에는 STL 컨테이너를 사용해도 됩니다.
2.1 생성자 구현하기
생성자의 매개 변수는 size_t형 maxPoolSize 하나뿐입니다.
maxPoolSize는 풀이 지우지 않고 보관해 두는 미사용 개체의 최대 개수입니다.
풀이 처음 생성될 때는 보관 중인 미사용 개체가 없어야 합니다.
ObjectPool<T>은 복사 또는 대입이 불가능합니다.
필요한 경우 소멸자를 구현하세요.
ObjectPool<IceCube> op(100);
op.GetFreeObjectCount(); // 0을 반환
2.2 Get() 메서드 구현하기
Get() 메서드에는 매개 변수가 없습니다.
Get() 메서드는 T형 개체를 가리키는 포인터를 반환하는데, 풀에서 가장 오랫동안 저장하고 있는 포인터를 반환해야 합니다. 여기서 포인터를 반환한다는 것은 반환되는 개체의 소유권이 Get() 메서드의 호출자에게 넘어간다는 의미입니다.
풀이 비어 있으면 Get() 메서드가 새로운 T형 개체를 생성하여 반환합니다.
ObjectPool<IceCube> op(20);
op.GetFreeObjectCount(); // 0을 반환

IceCube* i1 = op.Get();
IceCube* i2 = op.Get();
2.3 Return() 메서드 구현하기
Return() 메서드의 매개 변수는 T형 개체를 가리키는 포인터 하나뿐입니다.
Return() 메서드는 아무것도 반환하지 않습니다.
이미 풀이 가득 차 있었다면 반납된 개체를 지웁니다.
ObjectPool<IceCube> op(1);
op.GetFreeObjectCount(); // 0을 반환

IceCube* i1 = op.Get();
IceCube* i2 = op.Get();

op.Return(i1);
op.GetFreeObjectCount(); // 1을 반환

op.Return(i2);
op.GetFreeObjectCount(); // 1을 반환
2.4 GetFreeObjectCount() 메서드 구현하기
GetFreeObjectCount() 메서드에는 매개 변수가 없습니다.
풀의 현재 크기를 반환합니다. 반환형은 size_t입니다.
ObjectPool<IceCube> op(20);
op.GetFreeObjectCount(); // 0을 반환

IceCube* i1 = op.Get();
IceCube* i2 = op.Get();

op.GetFreeObjectCount(); // 0을 반환

op.Return(i1);
op.GetFreeObjectCount(); // 1을 반환

op.Return(i2);
op.GetFreeObjectCount(); // 2을 반환
2.5 GetMaxFreeObjectCount() 메서드 구현하기
GetMaxFreeObjectCount() 메서드는 풀이 지우지 않고 저장할 수 있는 미사용 개체의 최대 개수를 반환합니다.
반환형은 반드시 size_t여야 합니다.
ObjectPool<IceCube> op(20);
op.GetMaxFreeObjectCount(); // 20 반환

IceCube* i1 = op.Get();
op.GetMaxFreeObjectCount(); // 20 반환
3. ObjectPool<T>를 사용할 수 있도록 Game 클래스 수정하기
현재 구현되어 있는 Game 클래스는 IceCube 개체의 인스턴스를 직접 생성하고 지웁니다. 다시 말해서 쓸데없이 개체 생성과 소멸을 반복해서 게임의 실행 속도를 느리게 만들고 있습니다. 이 문제를 고칩시다.

3.1 생성자 수정하기
Game 클래스의 생성자는 이미 존재하는 매개 변수 외에 unsigned int형 poolSize를 추가로 받아야 합니다.
Game game(1, 10); // poolSize의 최댓값은 10
3.2 Spawn() 메서드 수정하기
이제 위에서 구현한 ObjectPool<T>를 사용해서 IceCube를 가져 오도록 Spawn() 메서드를 수정하세요. 메서드 시그내처는 수정하면 안 됩니다.
3.3 Update() 메서드 수정하기
이제 위에서 구현한 ObjectPool<T>를 사용하여 IceCube 개체를 풀에 반납하도록 Update() 메서드를 수정하세요. 메서드 시그내처는 수정하면 안 됩니다.
3.4 GetObjectPool() 메서드 추가하기
GetObjectPool() 메서드는 Game 클래스에서 사용된 ObjectPool<T>를 참조로 반환합니다.
Game game(1, 4);
ObjectPool<IceCube>& op = game.GetObjectPool();
4. 본인 컴퓨터에서 테스트하는 법
프로젝트에 main.cpp를 추가하고, 그 안에 테스트 코드를 작성하세요. 아래는 테스트 코드의 한 예입니다.
#include <cassert>
#include "IceCube.h"
#include "ObjectPool.h"
#include "Game.h"

using namespace lab9;

int main()
{
	ObjectPool<IceCube> pool(3);

	assert(pool.GetMaxFreeObjectCount() == 3);
	assert(pool.GetFreeObjectCount() == 0);

	IceCube* i1 = pool.Get();

	i1->Initialize(5);

	IceCube* i2 = pool.Get();
	i2->Initialize(1);

	IceCube* i3 = pool.Get();
	i3->Initialize(4);

	assert(pool.GetFreeObjectCount() == 0);
	i1->Reset();
	pool.Return(i1);
	assert(pool.GetFreeObjectCount() == 1);

	IceCube* i4 = pool.Get();

	assert(i1 == i4);
	assert(!(i4->IsActive()));

	pool.Return(i2);
	pool.Return(i3);
	pool.Return(i4);

	Game game(1, 4);
	const std::vector<IceCube*>& activeGameObjects = game.GetActiveGameObjects();
	assert(activeGameObjects.size() == 0);

	game.Spawn();
	game.Spawn();
	game.Spawn();
	game.Spawn();
	game.Spawn();

	assert(activeGameObjects.size() == 5);
	assert(activeGameObjects[0]->IsActive());
	assert(activeGameObjects[1]->IsActive());
	assert(activeGameObjects[2]->IsActive());
	assert(activeGameObjects[3]->IsActive());
	assert(activeGameObjects[4]->IsActive());
	
	const IceCube* i5 = activeGameObjects[3];
	
	game.Update();

	const std::vector<IceCube*>& activeGameObjects2 = game.GetActiveGameObjects();
	assert(activeGameObjects2.size() == 4);
	assert(activeGameObjects[0] == activeGameObjects2[0]);
	assert(activeGameObjects[1] == activeGameObjects2[1]);
	assert(activeGameObjects[2] == activeGameObjects2[2]);
	assert(activeGameObjects[3] == activeGameObjects2[3]);

	auto& op2 = game.GetObjectPool();
	IceCube* i6 = op2.Get();

	assert(i6 == i5);

	op2.Return(i6);
}
5. 커밋, 푸쉬 그리고 빌드 요청
이건 어떻게 하는지 이제 다 아시죠? :)

 Copyright © 2018 - 2019. POCU Labs Inc.
문의하기 개인정보처리방침 이용 약관 POCU 소개 로드맵
   
